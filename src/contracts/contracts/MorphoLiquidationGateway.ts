/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MorphoLiquidationGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProtocol"
      | "optimexDomain"
      | "payment"
      | "paymentDetails"
      | "setProtocol"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PaymentExecuted" | "ProtocolUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimexDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payment",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocol",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimexDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocol",
    data: BytesLike
  ): Result;
}

export namespace PaymentExecutedEvent {
  export type InputTuple = [
    payer: AddressLike,
    liquidator: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    payer: string,
    liquidator: string,
    token: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    payer: string;
    liquidator: string;
    token: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolUpdatedEvent {
  export type InputTuple = [operator: AddressLike, newProtocol: AddressLike];
  export type OutputTuple = [operator: string, newProtocol: string];
  export interface OutputObject {
    operator: string;
    newProtocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoLiquidationGateway extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoLiquidationGateway;
  waitForDeployment(): Promise<this>;

  interface: MorphoLiquidationGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProtocol: TypedContractMethod<[], [string], "view">;

  optimexDomain: TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;

  payment: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, externalCall: BytesLike],
    [void],
    "nonpayable"
  >;

  paymentDetails: TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        payer: string;
        paymentToken: string;
        paymentAmount: bigint;
      }
    ],
    "view"
  >;

  setProtocol: TypedContractMethod<
    [newProtocol: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "optimexDomain"
  ): TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "payment"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, externalCall: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paymentDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        payer: string;
        paymentToken: string;
        paymentAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProtocol"
  ): TypedContractMethod<[newProtocol: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "PaymentExecuted"
  ): TypedContractEvent<
    PaymentExecutedEvent.InputTuple,
    PaymentExecutedEvent.OutputTuple,
    PaymentExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolUpdated"
  ): TypedContractEvent<
    ProtocolUpdatedEvent.InputTuple,
    ProtocolUpdatedEvent.OutputTuple,
    ProtocolUpdatedEvent.OutputObject
  >;

  filters: {
    "PaymentExecuted(address,address,address,uint256,bytes)": TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;
    PaymentExecuted: TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;

    "ProtocolUpdated(address,address)": TypedContractEvent<
      ProtocolUpdatedEvent.InputTuple,
      ProtocolUpdatedEvent.OutputTuple,
      ProtocolUpdatedEvent.OutputObject
    >;
    ProtocolUpdated: TypedContractEvent<
      ProtocolUpdatedEvent.InputTuple,
      ProtocolUpdatedEvent.OutputTuple,
      ProtocolUpdatedEvent.OutputObject
    >;
  };
}
