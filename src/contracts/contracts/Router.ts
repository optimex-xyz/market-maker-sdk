/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITypes {
  export type RFQInfoStruct = {
    minAmountOut: BigNumberish;
    tradeTimeout: BigNumberish;
    rfqInfoSignature: BytesLike;
  };

  export type RFQInfoStructOutput = [
    minAmountOut: bigint,
    tradeTimeout: bigint,
    rfqInfoSignature: string
  ] & { minAmountOut: bigint; tradeTimeout: bigint; rfqInfoSignature: string };

  export type BundlePaymentStruct = {
    tradeIds: BytesLike[];
    signedAt: BigNumberish;
    startIdx: BigNumberish;
    paymentTxId: BytesLike;
    signature: BytesLike;
  };

  export type BundlePaymentStructOutput = [
    tradeIds: string[],
    signedAt: bigint,
    startIdx: bigint,
    paymentTxId: string,
    signature: string
  ] & {
    tradeIds: string[];
    signedAt: bigint;
    startIdx: bigint;
    paymentTxId: string;
    signature: string;
  };

  export type AffiliateStruct = {
    aggregatedValue: BigNumberish;
    schema: string;
    data: BytesLike;
  };

  export type AffiliateStructOutput = [
    aggregatedValue: bigint,
    schema: string,
    data: string
  ] & { aggregatedValue: bigint; schema: string; data: string };

  export type FailureDetailsStruct = {
    stage: BigNumberish;
    msgError: BytesLike;
  };

  export type FailureDetailsStructOutput = [stage: bigint, msgError: string] & {
    stage: bigint;
    msgError: string;
  };

  export type FeeDetailsStruct = {
    totalAmount: BigNumberish;
    pFeeAmount: BigNumberish;
    aFeeAmount: BigNumberish;
    pFeeRate: BigNumberish;
    aFeeRate: BigNumberish;
  };

  export type FeeDetailsStructOutput = [
    totalAmount: bigint,
    pFeeAmount: bigint,
    aFeeAmount: bigint,
    pFeeRate: bigint,
    aFeeRate: bigint
  ] & {
    totalAmount: bigint;
    pFeeAmount: bigint;
    aFeeAmount: bigint;
    pFeeRate: bigint;
    aFeeRate: bigint;
  };

  export type SelectedPMMInfoStruct = {
    amountOut: BigNumberish;
    selectedPMMId: BytesLike;
    info: [BytesLike, BytesLike];
    sigExpiry: BigNumberish;
  };

  export type SelectedPMMInfoStructOutput = [
    amountOut: bigint,
    selectedPMMId: string,
    info: [string, string],
    sigExpiry: bigint
  ] & {
    amountOut: bigint;
    selectedPMMId: string;
    info: [string, string];
    sigExpiry: bigint;
  };

  export type PMMSelectionStruct = {
    rfqInfo: ITypes.RFQInfoStruct;
    pmmInfo: ITypes.SelectedPMMInfoStruct;
  };

  export type PMMSelectionStructOutput = [
    rfqInfo: ITypes.RFQInfoStructOutput,
    pmmInfo: ITypes.SelectedPMMInfoStructOutput
  ] & {
    rfqInfo: ITypes.RFQInfoStructOutput;
    pmmInfo: ITypes.SelectedPMMInfoStructOutput;
  };

  export type RefundPresignStruct = {
    refundAddress: BytesLike;
    presigns: BytesLike[];
  };

  export type RefundPresignStructOutput = [
    refundAddress: string,
    presigns: string[]
  ] & { refundAddress: string; presigns: string[] };

  export type SettlementPresignStruct = {
    pmmId: BytesLike;
    pmmRecvAddress: BytesLike;
    presigns: BytesLike[];
  };

  export type SettlementPresignStructOutput = [
    pmmId: string,
    pmmRecvAddress: string,
    presigns: string[]
  ] & { pmmId: string; pmmRecvAddress: string; presigns: string[] };

  export type TradeInfoStruct = {
    amountIn: BigNumberish;
    fromChain: [BytesLike, BytesLike, BytesLike];
    toChain: [BytesLike, BytesLike, BytesLike];
  };

  export type TradeInfoStructOutput = [
    amountIn: bigint,
    fromChain: [string, string, string],
    toChain: [string, string, string]
  ] & {
    amountIn: bigint;
    fromChain: [string, string, string];
    toChain: [string, string, string];
  };

  export type ScriptInfoStruct = {
    depositInfo: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike];
    userEphemeralL2Address: AddressLike;
    scriptTimeout: BigNumberish;
  };

  export type ScriptInfoStructOutput = [
    depositInfo: [string, string, string, string, string],
    userEphemeralL2Address: string,
    scriptTimeout: bigint
  ] & {
    depositInfo: [string, string, string, string, string];
    userEphemeralL2Address: string;
    scriptTimeout: bigint;
  };

  export type TradeDataStruct = {
    sessionId: BigNumberish;
    tradeInfo: ITypes.TradeInfoStruct;
    scriptInfo: ITypes.ScriptInfoStruct;
  };

  export type TradeDataStructOutput = [
    sessionId: bigint,
    tradeInfo: ITypes.TradeInfoStructOutput,
    scriptInfo: ITypes.ScriptInfoStructOutput
  ] & {
    sessionId: bigint;
    tradeInfo: ITypes.TradeInfoStructOutput;
    scriptInfo: ITypes.ScriptInfoStructOutput;
  };

  export type TradeFinalizationStruct = {
    bundlerHash: BytesLike;
    index: BigNumberish;
    paymentTxId: BytesLike;
    releaseTxId: BytesLike;
    refundTxId: BytesLike;
    isConfirmed: boolean;
  };

  export type TradeFinalizationStructOutput = [
    bundlerHash: string,
    index: bigint,
    paymentTxId: string,
    releaseTxId: string,
    refundTxId: string,
    isConfirmed: boolean
  ] & {
    bundlerHash: string;
    index: bigint;
    paymentTxId: string;
    releaseTxId: string;
    refundTxId: string;
    isConfirmed: boolean;
  };
}

export interface RouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SIGNER"
      | "abort"
      | "bundlePayment"
      | "confirmDeposit"
      | "confirmPayment"
      | "confirmPresign"
      | "confirmSettlement"
      | "getAffiliateInfo"
      | "getCurrentEpoch"
      | "getCurrentStage"
      | "getFailureInfo"
      | "getFeeDetails"
      | "getHandler"
      | "getHandlerOf"
      | "getHistoryCount"
      | "getPMMSelection"
      | "getPendingTrades"
      | "getPendingTradesCount"
      | "getRefundPresign"
      | "getRegisteredHandlers"
      | "getSettlementPresigns"
      | "getSolver"
      | "getTradeData"
      | "getTradeFinalization"
      | "management"
      | "migrate"
      | "refund"
      | "report"
      | "selectPMM"
      | "setManagement"
      | "setRoute"
      | "submitDeposit"
      | "submitTrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Abort"
      | "ConfirmDeposit"
      | "ConfirmPayment"
      | "ConfirmPresign"
      | "ConfirmRefund"
      | "ConfirmSettlement"
      | "MakePayment"
      | "ReportFailure"
      | "SelectPMM"
      | "SubmitDeposit"
      | "SubmitTradeInfo"
      | "UpdatedManagement"
      | "UpdatedRoute"
  ): EventFragment;

  encodeFunctionData(functionFragment: "SIGNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "abort",
    values: [BytesLike, ITypes.RFQInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bundlePayment",
    values: [ITypes.BundlePaymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDeposit",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPayment",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPresign",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSettlement",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFailureInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandler",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandlerOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryCount",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMSelection",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTrades",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTradesCount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundPresign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredHandlers",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementPresigns",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSolver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeFinalization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "management",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectPMM",
    values: [BytesLike, ITypes.PMMSelectionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoute",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDeposit",
    values: [BytesLike, ITypes.TradeDataStruct, ITypes.RefundPresignStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTrade",
    values: [
      BytesLike,
      ITypes.TradeDataStruct,
      ITypes.AffiliateStruct,
      ITypes.SettlementPresignStruct[],
      ITypes.RefundPresignStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "SIGNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bundlePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPresign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFailureInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHandlerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTradesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundPresign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredHandlers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementPresigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeFinalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "management", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selectPMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTrade",
    data: BytesLike
  ): Result;
}

export namespace AbortEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmDepositEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmPaymentEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmPresignEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmRefundEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmSettlementEvent {
  export type InputTuple = [mpc: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [mpc: string, tradeId: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MakePaymentEvent {
  export type InputTuple = [operator: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [operator: string, tradeId: string];
  export interface OutputObject {
    operator: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportFailureEvent {
  export type InputTuple = [
    mpc: AddressLike,
    tradeId: BytesLike,
    msgError: BytesLike
  ];
  export type OutputTuple = [mpc: string, tradeId: string, msgError: string];
  export interface OutputObject {
    mpc: string;
    tradeId: string;
    msgError: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectPMMEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitDepositEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitTradeInfoEvent {
  export type InputTuple = [solver: AddressLike, tradeId: BytesLike];
  export type OutputTuple = [solver: string, tradeId: string];
  export interface OutputObject {
    solver: string;
    tradeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedManagementEvent {
  export type InputTuple = [operator: AddressLike, newManagement: AddressLike];
  export type OutputTuple = [operator: string, newManagement: string];
  export interface OutputObject {
    operator: string;
    newManagement: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRouteEvent {
  export type InputTuple = [
    handler: AddressLike,
    fromNetwork: BytesLike,
    toNetwork: BytesLike
  ];
  export type OutputTuple = [
    handler: string,
    fromNetwork: string,
    toNetwork: string
  ];
  export interface OutputObject {
    handler: string;
    fromNetwork: string;
    toNetwork: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Router extends BaseContract {
  connect(runner?: ContractRunner | null): Router;
  waitForDeployment(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SIGNER: TypedContractMethod<[], [string], "view">;

  abort: TypedContractMethod<
    [tradeId: BytesLike, rfqInfo: ITypes.RFQInfoStruct],
    [void],
    "nonpayable"
  >;

  bundlePayment: TypedContractMethod<
    [bundle: ITypes.BundlePaymentStruct],
    [void],
    "nonpayable"
  >;

  confirmDeposit: TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike, depositFromList: BytesLike[]],
    [void],
    "nonpayable"
  >;

  confirmPayment: TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  confirmPresign: TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  confirmSettlement: TypedContractMethod<
    [tradeId: BytesLike, releaseTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getAffiliateInfo: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.AffiliateStructOutput],
    "view"
  >;

  getCurrentEpoch: TypedContractMethod<
    [handler: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getCurrentStage: TypedContractMethod<
    [tradeId: BytesLike],
    [[bigint, string] & { stage: bigint; swapType: string }],
    "view"
  >;

  getFailureInfo: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.FailureDetailsStructOutput],
    "view"
  >;

  getFeeDetails: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.FeeDetailsStructOutput],
    "view"
  >;

  getHandler: TypedContractMethod<
    [fromNetwork: BytesLike, toNetwork: BytesLike],
    [[string, string] & { handler: string; handlerType: string }],
    "view"
  >;

  getHandlerOf: TypedContractMethod<
    [tradeId: BytesLike],
    [[string, string] & { handler: string; handlerType: string }],
    "view"
  >;

  getHistoryCount: TypedContractMethod<
    [fromNetwork: BytesLike, toNetwork: BytesLike],
    [bigint],
    "view"
  >;

  getPMMSelection: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PMMSelectionStructOutput],
    "view"
  >;

  getPendingTrades: TypedContractMethod<
    [
      handler: AddressLike,
      epochNo: BigNumberish,
      fromIdx: BigNumberish,
      toIdx: BigNumberish
    ],
    [string[]],
    "view"
  >;

  getPendingTradesCount: TypedContractMethod<
    [handler: AddressLike, epochNo: BigNumberish],
    [bigint],
    "view"
  >;

  getRefundPresign: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.RefundPresignStructOutput],
    "view"
  >;

  getRegisteredHandlers: TypedContractMethod<
    [
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      fromNetwork: BytesLike,
      toNetwork: BytesLike
    ],
    [string[]],
    "view"
  >;

  getSettlementPresigns: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.SettlementPresignStructOutput[]],
    "view"
  >;

  getSolver: TypedContractMethod<[tradeId: BytesLike], [string], "view">;

  getTradeData: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeDataStructOutput],
    "view"
  >;

  getTradeFinalization: TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeFinalizationStructOutput],
    "view"
  >;

  management: TypedContractMethod<[], [string], "view">;

  migrate: TypedContractMethod<
    [referenceIds: BytesLike[], handlers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  refund: TypedContractMethod<
    [tradeId: BytesLike, refundTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  report: TypedContractMethod<
    [
      tradeId: BytesLike,
      msgError: BytesLike,
      referenceInfo: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  selectPMM: TypedContractMethod<
    [tradeId: BytesLike, info: ITypes.PMMSelectionStruct],
    [void],
    "nonpayable"
  >;

  setManagement: TypedContractMethod<
    [newManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoute: TypedContractMethod<
    [handler: AddressLike, fromNetwork: BytesLike, toNetwork: BytesLike],
    [void],
    "nonpayable"
  >;

  submitDeposit: TypedContractMethod<
    [
      tradeId: BytesLike,
      tradeData: ITypes.TradeDataStruct,
      refundPresign: ITypes.RefundPresignStruct
    ],
    [void],
    "nonpayable"
  >;

  submitTrade: TypedContractMethod<
    [
      tradeId: BytesLike,
      tradeData: ITypes.TradeDataStruct,
      affiliateInfo: ITypes.AffiliateStruct,
      settlementPresigns: ITypes.SettlementPresignStruct[],
      refundPresign: ITypes.RefundPresignStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SIGNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "abort"
  ): TypedContractMethod<
    [tradeId: BytesLike, rfqInfo: ITypes.RFQInfoStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bundlePayment"
  ): TypedContractMethod<
    [bundle: ITypes.BundlePaymentStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmDeposit"
  ): TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike, depositFromList: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmPayment"
  ): TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmPresign"
  ): TypedContractMethod<
    [tradeId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmSettlement"
  ): TypedContractMethod<
    [tradeId: BytesLike, releaseTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAffiliateInfo"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.AffiliateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<
    [handler: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentStage"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [[bigint, string] & { stage: bigint; swapType: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFailureInfo"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.FailureDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeDetails"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.FeeDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHandler"
  ): TypedContractMethod<
    [fromNetwork: BytesLike, toNetwork: BytesLike],
    [[string, string] & { handler: string; handlerType: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHandlerOf"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [[string, string] & { handler: string; handlerType: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoryCount"
  ): TypedContractMethod<
    [fromNetwork: BytesLike, toNetwork: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPMMSelection"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.PMMSelectionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingTrades"
  ): TypedContractMethod<
    [
      handler: AddressLike,
      epochNo: BigNumberish,
      fromIdx: BigNumberish,
      toIdx: BigNumberish
    ],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingTradesCount"
  ): TypedContractMethod<
    [handler: AddressLike, epochNo: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRefundPresign"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.RefundPresignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRegisteredHandlers"
  ): TypedContractMethod<
    [
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      fromNetwork: BytesLike,
      toNetwork: BytesLike
    ],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettlementPresigns"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.SettlementPresignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSolver"
  ): TypedContractMethod<[tradeId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTradeData"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeFinalization"
  ): TypedContractMethod<
    [tradeId: BytesLike],
    [ITypes.TradeFinalizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "management"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [referenceIds: BytesLike[], handlers: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [tradeId: BytesLike, refundTxId: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "report"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      msgError: BytesLike,
      referenceInfo: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectPMM"
  ): TypedContractMethod<
    [tradeId: BytesLike, info: ITypes.PMMSelectionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagement"
  ): TypedContractMethod<[newManagement: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoute"
  ): TypedContractMethod<
    [handler: AddressLike, fromNetwork: BytesLike, toNetwork: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitDeposit"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      tradeData: ITypes.TradeDataStruct,
      refundPresign: ITypes.RefundPresignStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTrade"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      tradeData: ITypes.TradeDataStruct,
      affiliateInfo: ITypes.AffiliateStruct,
      settlementPresigns: ITypes.SettlementPresignStruct[],
      refundPresign: ITypes.RefundPresignStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Abort"
  ): TypedContractEvent<
    AbortEvent.InputTuple,
    AbortEvent.OutputTuple,
    AbortEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmDeposit"
  ): TypedContractEvent<
    ConfirmDepositEvent.InputTuple,
    ConfirmDepositEvent.OutputTuple,
    ConfirmDepositEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmPayment"
  ): TypedContractEvent<
    ConfirmPaymentEvent.InputTuple,
    ConfirmPaymentEvent.OutputTuple,
    ConfirmPaymentEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmPresign"
  ): TypedContractEvent<
    ConfirmPresignEvent.InputTuple,
    ConfirmPresignEvent.OutputTuple,
    ConfirmPresignEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmRefund"
  ): TypedContractEvent<
    ConfirmRefundEvent.InputTuple,
    ConfirmRefundEvent.OutputTuple,
    ConfirmRefundEvent.OutputObject
  >;
  getEvent(
    key: "ConfirmSettlement"
  ): TypedContractEvent<
    ConfirmSettlementEvent.InputTuple,
    ConfirmSettlementEvent.OutputTuple,
    ConfirmSettlementEvent.OutputObject
  >;
  getEvent(
    key: "MakePayment"
  ): TypedContractEvent<
    MakePaymentEvent.InputTuple,
    MakePaymentEvent.OutputTuple,
    MakePaymentEvent.OutputObject
  >;
  getEvent(
    key: "ReportFailure"
  ): TypedContractEvent<
    ReportFailureEvent.InputTuple,
    ReportFailureEvent.OutputTuple,
    ReportFailureEvent.OutputObject
  >;
  getEvent(
    key: "SelectPMM"
  ): TypedContractEvent<
    SelectPMMEvent.InputTuple,
    SelectPMMEvent.OutputTuple,
    SelectPMMEvent.OutputObject
  >;
  getEvent(
    key: "SubmitDeposit"
  ): TypedContractEvent<
    SubmitDepositEvent.InputTuple,
    SubmitDepositEvent.OutputTuple,
    SubmitDepositEvent.OutputObject
  >;
  getEvent(
    key: "SubmitTradeInfo"
  ): TypedContractEvent<
    SubmitTradeInfoEvent.InputTuple,
    SubmitTradeInfoEvent.OutputTuple,
    SubmitTradeInfoEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedManagement"
  ): TypedContractEvent<
    UpdatedManagementEvent.InputTuple,
    UpdatedManagementEvent.OutputTuple,
    UpdatedManagementEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRoute"
  ): TypedContractEvent<
    UpdatedRouteEvent.InputTuple,
    UpdatedRouteEvent.OutputTuple,
    UpdatedRouteEvent.OutputObject
  >;

  filters: {
    "Abort(address,bytes32)": TypedContractEvent<
      AbortEvent.InputTuple,
      AbortEvent.OutputTuple,
      AbortEvent.OutputObject
    >;
    Abort: TypedContractEvent<
      AbortEvent.InputTuple,
      AbortEvent.OutputTuple,
      AbortEvent.OutputObject
    >;

    "ConfirmDeposit(address,bytes32)": TypedContractEvent<
      ConfirmDepositEvent.InputTuple,
      ConfirmDepositEvent.OutputTuple,
      ConfirmDepositEvent.OutputObject
    >;
    ConfirmDeposit: TypedContractEvent<
      ConfirmDepositEvent.InputTuple,
      ConfirmDepositEvent.OutputTuple,
      ConfirmDepositEvent.OutputObject
    >;

    "ConfirmPayment(address,bytes32)": TypedContractEvent<
      ConfirmPaymentEvent.InputTuple,
      ConfirmPaymentEvent.OutputTuple,
      ConfirmPaymentEvent.OutputObject
    >;
    ConfirmPayment: TypedContractEvent<
      ConfirmPaymentEvent.InputTuple,
      ConfirmPaymentEvent.OutputTuple,
      ConfirmPaymentEvent.OutputObject
    >;

    "ConfirmPresign(address,bytes32)": TypedContractEvent<
      ConfirmPresignEvent.InputTuple,
      ConfirmPresignEvent.OutputTuple,
      ConfirmPresignEvent.OutputObject
    >;
    ConfirmPresign: TypedContractEvent<
      ConfirmPresignEvent.InputTuple,
      ConfirmPresignEvent.OutputTuple,
      ConfirmPresignEvent.OutputObject
    >;

    "ConfirmRefund(address,bytes32)": TypedContractEvent<
      ConfirmRefundEvent.InputTuple,
      ConfirmRefundEvent.OutputTuple,
      ConfirmRefundEvent.OutputObject
    >;
    ConfirmRefund: TypedContractEvent<
      ConfirmRefundEvent.InputTuple,
      ConfirmRefundEvent.OutputTuple,
      ConfirmRefundEvent.OutputObject
    >;

    "ConfirmSettlement(address,bytes32)": TypedContractEvent<
      ConfirmSettlementEvent.InputTuple,
      ConfirmSettlementEvent.OutputTuple,
      ConfirmSettlementEvent.OutputObject
    >;
    ConfirmSettlement: TypedContractEvent<
      ConfirmSettlementEvent.InputTuple,
      ConfirmSettlementEvent.OutputTuple,
      ConfirmSettlementEvent.OutputObject
    >;

    "MakePayment(address,bytes32)": TypedContractEvent<
      MakePaymentEvent.InputTuple,
      MakePaymentEvent.OutputTuple,
      MakePaymentEvent.OutputObject
    >;
    MakePayment: TypedContractEvent<
      MakePaymentEvent.InputTuple,
      MakePaymentEvent.OutputTuple,
      MakePaymentEvent.OutputObject
    >;

    "ReportFailure(address,bytes32,bytes)": TypedContractEvent<
      ReportFailureEvent.InputTuple,
      ReportFailureEvent.OutputTuple,
      ReportFailureEvent.OutputObject
    >;
    ReportFailure: TypedContractEvent<
      ReportFailureEvent.InputTuple,
      ReportFailureEvent.OutputTuple,
      ReportFailureEvent.OutputObject
    >;

    "SelectPMM(address,bytes32)": TypedContractEvent<
      SelectPMMEvent.InputTuple,
      SelectPMMEvent.OutputTuple,
      SelectPMMEvent.OutputObject
    >;
    SelectPMM: TypedContractEvent<
      SelectPMMEvent.InputTuple,
      SelectPMMEvent.OutputTuple,
      SelectPMMEvent.OutputObject
    >;

    "SubmitDeposit(address,bytes32)": TypedContractEvent<
      SubmitDepositEvent.InputTuple,
      SubmitDepositEvent.OutputTuple,
      SubmitDepositEvent.OutputObject
    >;
    SubmitDeposit: TypedContractEvent<
      SubmitDepositEvent.InputTuple,
      SubmitDepositEvent.OutputTuple,
      SubmitDepositEvent.OutputObject
    >;

    "SubmitTradeInfo(address,bytes32)": TypedContractEvent<
      SubmitTradeInfoEvent.InputTuple,
      SubmitTradeInfoEvent.OutputTuple,
      SubmitTradeInfoEvent.OutputObject
    >;
    SubmitTradeInfo: TypedContractEvent<
      SubmitTradeInfoEvent.InputTuple,
      SubmitTradeInfoEvent.OutputTuple,
      SubmitTradeInfoEvent.OutputObject
    >;

    "UpdatedManagement(address,address)": TypedContractEvent<
      UpdatedManagementEvent.InputTuple,
      UpdatedManagementEvent.OutputTuple,
      UpdatedManagementEvent.OutputObject
    >;
    UpdatedManagement: TypedContractEvent<
      UpdatedManagementEvent.InputTuple,
      UpdatedManagementEvent.OutputTuple,
      UpdatedManagementEvent.OutputObject
    >;

    "UpdatedRoute(address,bytes,bytes)": TypedContractEvent<
      UpdatedRouteEvent.InputTuple,
      UpdatedRouteEvent.OutputTuple,
      UpdatedRouteEvent.OutputObject
    >;
    UpdatedRoute: TypedContractEvent<
      UpdatedRouteEvent.InputTuple,
      UpdatedRouteEvent.OutputTuple,
      UpdatedRouteEvent.OutputObject
    >;
  };
}
