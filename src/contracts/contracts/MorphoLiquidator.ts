/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MorphoLiquidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MORPHO_MANAGEMENT"
      | "eip712Domain"
      | "onMorphoLiquidate"
      | "onMorphoRepay"
      | "optimexDomain"
      | "payment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "ForceClose"
      | "Liquidate"
      | "OnMorphoLiquidate"
      | "OnMorphoRepay"
      | "Payment"
      | "ProfitTaken"
      | "Refunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MORPHO_MANAGEMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoLiquidate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoRepay",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "optimexDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payment",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MORPHO_MANAGEMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimexDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForceCloseEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    positionId: BytesLike,
    marketId: BytesLike,
    totalCollateral: BigNumberish,
    totalPayment: BigNumberish,
    repaidDebt: BigNumberish
  ];
  export type OutputTuple = [
    positionManager: string,
    positionId: string,
    marketId: string,
    totalCollateral: bigint,
    totalPayment: bigint,
    repaidDebt: bigint
  ];
  export interface OutputObject {
    positionManager: string;
    positionId: string;
    marketId: string;
    totalCollateral: bigint;
    totalPayment: bigint;
    repaidDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    positionId: BytesLike,
    marketId: BytesLike,
    totalCollateral: BigNumberish,
    seizedCollateral: BigNumberish,
    totalPayment: BigNumberish,
    repaidDebt: BigNumberish
  ];
  export type OutputTuple = [
    positionManager: string,
    positionId: string,
    marketId: string,
    totalCollateral: bigint,
    seizedCollateral: bigint,
    totalPayment: bigint,
    repaidDebt: bigint
  ];
  export interface OutputObject {
    positionManager: string;
    positionId: string;
    marketId: string;
    totalCollateral: bigint;
    seizedCollateral: bigint;
    totalPayment: bigint;
    repaidDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OnMorphoLiquidateEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    repaidAssets: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    positionManager: string,
    repaidAssets: bigint,
    data: string
  ];
  export interface OutputObject {
    positionManager: string;
    repaidAssets: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OnMorphoRepayEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    repaidAssets: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    positionManager: string,
    repaidAssets: bigint,
    data: string
  ];
  export interface OutputObject {
    positionManager: string;
    repaidAssets: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentEvent {
  export type InputTuple = [
    tradeId: BytesLike,
    positionManager: AddressLike,
    positionId: BytesLike,
    sender: AddressLike,
    marketId: BytesLike,
    amount: BigNumberish,
    collateral: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: string,
    positionManager: string,
    positionId: string,
    sender: string,
    marketId: string,
    amount: bigint,
    collateral: bigint
  ];
  export interface OutputObject {
    tradeId: string;
    positionManager: string;
    positionId: string;
    sender: string;
    marketId: string;
    amount: bigint;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfitTakenEvent {
  export type InputTuple = [
    positionId: BytesLike,
    token: AddressLike,
    pFeeReceiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    positionId: string,
    token: string,
    pFeeReceiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    positionId: string;
    token: string;
    pFeeReceiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    positionId: BytesLike,
    token: AddressLike,
    recipient: AddressLike,
    refundedAmount: BigNumberish
  ];
  export type OutputTuple = [
    positionId: string,
    token: string,
    recipient: string,
    refundedAmount: bigint
  ];
  export interface OutputObject {
    positionId: string;
    token: string;
    recipient: string;
    refundedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoLiquidator extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoLiquidator;
  waitForDeployment(): Promise<this>;

  interface: MorphoLiquidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MORPHO_MANAGEMENT: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  onMorphoLiquidate: TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onMorphoRepay: TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  optimexDomain: TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;

  payment: TypedContractMethod<
    [
      tradeId: BytesLike,
      positionManager: AddressLike,
      amount: BigNumberish,
      positionId: BytesLike,
      isLiquidate: boolean,
      validatorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MORPHO_MANAGEMENT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onMorphoLiquidate"
  ): TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onMorphoRepay"
  ): TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "optimexDomain"
  ): TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "payment"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      positionManager: AddressLike,
      amount: BigNumberish,
      positionId: BytesLike,
      isLiquidate: boolean,
      validatorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ForceClose"
  ): TypedContractEvent<
    ForceCloseEvent.InputTuple,
    ForceCloseEvent.OutputTuple,
    ForceCloseEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "OnMorphoLiquidate"
  ): TypedContractEvent<
    OnMorphoLiquidateEvent.InputTuple,
    OnMorphoLiquidateEvent.OutputTuple,
    OnMorphoLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "OnMorphoRepay"
  ): TypedContractEvent<
    OnMorphoRepayEvent.InputTuple,
    OnMorphoRepayEvent.OutputTuple,
    OnMorphoRepayEvent.OutputObject
  >;
  getEvent(
    key: "Payment"
  ): TypedContractEvent<
    PaymentEvent.InputTuple,
    PaymentEvent.OutputTuple,
    PaymentEvent.OutputObject
  >;
  getEvent(
    key: "ProfitTaken"
  ): TypedContractEvent<
    ProfitTakenEvent.InputTuple,
    ProfitTakenEvent.OutputTuple,
    ProfitTakenEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ForceClose(address,bytes32,bytes32,uint256,uint256,uint256)": TypedContractEvent<
      ForceCloseEvent.InputTuple,
      ForceCloseEvent.OutputTuple,
      ForceCloseEvent.OutputObject
    >;
    ForceClose: TypedContractEvent<
      ForceCloseEvent.InputTuple,
      ForceCloseEvent.OutputTuple,
      ForceCloseEvent.OutputObject
    >;

    "Liquidate(address,bytes32,bytes32,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "OnMorphoLiquidate(address,uint256,bytes)": TypedContractEvent<
      OnMorphoLiquidateEvent.InputTuple,
      OnMorphoLiquidateEvent.OutputTuple,
      OnMorphoLiquidateEvent.OutputObject
    >;
    OnMorphoLiquidate: TypedContractEvent<
      OnMorphoLiquidateEvent.InputTuple,
      OnMorphoLiquidateEvent.OutputTuple,
      OnMorphoLiquidateEvent.OutputObject
    >;

    "OnMorphoRepay(address,uint256,bytes)": TypedContractEvent<
      OnMorphoRepayEvent.InputTuple,
      OnMorphoRepayEvent.OutputTuple,
      OnMorphoRepayEvent.OutputObject
    >;
    OnMorphoRepay: TypedContractEvent<
      OnMorphoRepayEvent.InputTuple,
      OnMorphoRepayEvent.OutputTuple,
      OnMorphoRepayEvent.OutputObject
    >;

    "Payment(bytes32,address,bytes32,address,bytes32,uint256,uint256)": TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
    Payment: TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;

    "ProfitTaken(bytes32,address,address,uint256)": TypedContractEvent<
      ProfitTakenEvent.InputTuple,
      ProfitTakenEvent.OutputTuple,
      ProfitTakenEvent.OutputObject
    >;
    ProfitTaken: TypedContractEvent<
      ProfitTakenEvent.InputTuple,
      ProfitTakenEvent.OutputTuple,
      ProfitTakenEvent.OutputObject
    >;

    "Refunded(bytes32,address,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
  };
}
