/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SignerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eip712Domain"
      | "getConfirmRefundSigner"
      | "getDepositConfirmationSigner"
      | "getMakePaymentSigner"
      | "getPMMSelectionSigner"
      | "getPaymentConfirmationSigner"
      | "getRFQSigner"
      | "getReportFailureSigner"
      | "getSettlementConfirmationSigner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmRefundSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositConfirmationSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakePaymentSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMSelectionSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentConfirmationSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRFQSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportFailureSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementConfirmationSigner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmRefundSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositConfirmationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakePaymentSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMSelectionSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentConfirmationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRFQSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportFailureSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementConfirmationSigner",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Signer extends BaseContract {
  connect(runner?: ContractRunner | null): Signer;
  waitForDeployment(): Promise<this>;

  interface: SignerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getConfirmRefundSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getDepositConfirmationSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getMakePaymentSigner: TypedContractMethod<
    [infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getPMMSelectionSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getPaymentConfirmationSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getRFQSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getReportFailureSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getSettlementConfirmationSigner: TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfirmRefundSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositConfirmationSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMakePaymentSigner"
  ): TypedContractMethod<
    [infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPMMSelectionSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentConfirmationSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRFQSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReportFailureSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettlementConfirmationSigner"
  ): TypedContractMethod<
    [tradeId: BytesLike, infoHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
  };
}
