/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LendingLiquidationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LENDING_MANAGEMENT"
      | "MORPHO"
      | "VALIDATOR_FORCE_CLOSE_TYPEHASH"
      | "eip712Domain"
      | "onMorphoLiquidate"
      | "optimexDomain"
      | "owBtc"
      | "payment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "ForceClose"
      | "Liquidate"
      | "Payment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LENDING_MANAGEMENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MORPHO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_FORCE_CLOSE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoLiquidate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "optimexDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owBtc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payment",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDING_MANAGEMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MORPHO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_FORCE_CLOSE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimexDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owBtc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForceCloseEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    positionId: BytesLike,
    tradeId: BytesLike,
    marketId: BytesLike,
    repaidLoan: BigNumberish,
    userRefund: BigNumberish
  ];
  export type OutputTuple = [
    positionManager: string,
    positionId: string,
    tradeId: string,
    marketId: string,
    repaidLoan: bigint,
    userRefund: bigint
  ];
  export interface OutputObject {
    positionManager: string;
    positionId: string;
    tradeId: string;
    marketId: string;
    repaidLoan: bigint;
    userRefund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    positionId: BytesLike,
    tradeId: BytesLike,
    marketId: BytesLike,
    seizedCollateral: BigNumberish,
    remainingCollateral: BigNumberish,
    repaidLoan: BigNumberish,
    bonusLoan: BigNumberish
  ];
  export type OutputTuple = [
    positionManager: string,
    positionId: string,
    tradeId: string,
    marketId: string,
    seizedCollateral: bigint,
    remainingCollateral: bigint,
    repaidLoan: bigint,
    bonusLoan: bigint
  ];
  export interface OutputObject {
    positionManager: string;
    positionId: string;
    tradeId: string;
    marketId: string;
    seizedCollateral: bigint;
    remainingCollateral: bigint;
    repaidLoan: bigint;
    bonusLoan: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentEvent {
  export type InputTuple = [
    positionManager: AddressLike,
    positionId: BytesLike,
    tradeId: BytesLike,
    sender: AddressLike,
    marketId: BytesLike,
    amount: BigNumberish,
    collateral: BigNumberish
  ];
  export type OutputTuple = [
    positionManager: string,
    positionId: string,
    tradeId: string,
    sender: string,
    marketId: string,
    amount: bigint,
    collateral: bigint
  ];
  export interface OutputObject {
    positionManager: string;
    positionId: string;
    tradeId: string;
    sender: string;
    marketId: string;
    amount: bigint;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingLiquidation extends BaseContract {
  connect(runner?: ContractRunner | null): LendingLiquidation;
  waitForDeployment(): Promise<this>;

  interface: LendingLiquidationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LENDING_MANAGEMENT: TypedContractMethod<[], [string], "view">;

  MORPHO: TypedContractMethod<[], [string], "view">;

  VALIDATOR_FORCE_CLOSE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  onMorphoLiquidate: TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  optimexDomain: TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;

  owBtc: TypedContractMethod<[], [string], "view">;

  payment: TypedContractMethod<
    [
      tradeId: BytesLike,
      positionManager: AddressLike,
      amount: BigNumberish,
      positionId: BytesLike,
      isLiquidate: boolean,
      validatorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LENDING_MANAGEMENT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MORPHO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_FORCE_CLOSE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onMorphoLiquidate"
  ): TypedContractMethod<
    [repaidAssets: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "optimexDomain"
  ): TypedContractMethod<
    [],
    [[string, string] & { name: string; version: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owBtc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payment"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      positionManager: AddressLike,
      amount: BigNumberish,
      positionId: BytesLike,
      isLiquidate: boolean,
      validatorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ForceClose"
  ): TypedContractEvent<
    ForceCloseEvent.InputTuple,
    ForceCloseEvent.OutputTuple,
    ForceCloseEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "Payment"
  ): TypedContractEvent<
    PaymentEvent.InputTuple,
    PaymentEvent.OutputTuple,
    PaymentEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ForceClose(address,bytes32,bytes32,bytes32,uint256,uint256)": TypedContractEvent<
      ForceCloseEvent.InputTuple,
      ForceCloseEvent.OutputTuple,
      ForceCloseEvent.OutputObject
    >;
    ForceClose: TypedContractEvent<
      ForceCloseEvent.InputTuple,
      ForceCloseEvent.OutputTuple,
      ForceCloseEvent.OutputObject
    >;

    "Liquidate(address,bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "Payment(address,bytes32,bytes32,address,bytes32,uint256,uint256)": TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
    Payment: TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
  };
}
