/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  LendingLiquidation,
  LendingLiquidationInterface,
} from "../LendingLiquidation";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owBtc",
        type: "address",
      },
      {
        internalType: "address",
        name: "_morpho",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lendingManagement",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "InconsistentAsset",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMorpho",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "NotAuthorizedValidator",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughPaymentAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "positionManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "tradeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "repaidLoan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "userRefund",
        type: "uint256",
      },
    ],
    name: "ForceClose",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "positionManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "tradeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seizedCollateral",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "remainingCollateral",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "repaidLoan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bonusLoan",
        type: "uint256",
      },
    ],
    name: "Liquidate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "positionManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "tradeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    name: "Payment",
    type: "event",
  },
  {
    inputs: [],
    name: "LENDING_MANAGEMENT",
    outputs: [
      {
        internalType: "contract ILendingManagement",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MORPHO",
    outputs: [
      {
        internalType: "contract IMorpho",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VALIDATOR_FORCE_CLOSE_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repaidAssets",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onMorphoLiquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repaidAssets",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onMorphoRepay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "optimexDomain",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owBtc",
    outputs: [
      {
        internalType: "contract OW_BTC",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tradeId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "positionManager",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "positionId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isLiquidate",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "validatorSignature",
        type: "bytes",
      },
    ],
    name: "payment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class LendingLiquidation__factory {
  static readonly abi = _abi;
  static createInterface(): LendingLiquidationInterface {
    return new Interface(_abi) as LendingLiquidationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LendingLiquidation {
    return new Contract(address, _abi, runner) as unknown as LendingLiquidation;
  }
}
