/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITypes {
  export type MPCInfoStruct = {
    mpcL2Address: AddressLike;
    expireTime: BigNumberish;
    mpcL2Pubkey: BytesLike;
    mpcAssetPubkey: BytesLike;
  };

  export type MPCInfoStructOutput = [
    mpcL2Address: string,
    expireTime: bigint,
    mpcL2Pubkey: string,
    mpcAssetPubkey: string
  ] & {
    mpcL2Address: string;
    expireTime: bigint;
    mpcL2Pubkey: string;
    mpcAssetPubkey: string;
  };

  export type TokenInfoStruct = {
    info: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike];
    decimals: BigNumberish;
  };

  export type TokenInfoStructOutput = [
    info: [string, string, string, string, string],
    decimals: bigint
  ] & { info: [string, string, string, string, string]; decimals: bigint };
}

export interface ProtocolFetcherProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLatestMPCInfo"
      | "getMPCInfo"
      | "getManagementOwner"
      | "getPFeeRate"
      | "getPMMAccounts"
      | "getProtocolState"
      | "getTokens"
      | "getVault"
      | "isMPCNode"
      | "isSolver"
      | "isValidNetwork"
      | "isValidPMM"
      | "isValidPMMAccount"
      | "isValidPubkey"
      | "isValidToken"
      | "numOfPMMAccounts"
      | "numOfSupportedTokens"
      | "pManagement"
      | "registry"
      | "router"
      | "setProtocolManagement"
      | "setRouter"
      | "setSignerExtension"
      | "setVaultRegistry"
      | "signerExtension"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLatestMPCInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMPCInfo",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPFeeRate",
    values: [[BytesLike, BytesLike, BytesLike, BytesLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMAccounts",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMPCNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNetwork",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPMM",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPMMAccount",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPubkey",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidToken",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numOfPMMAccounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numOfSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pManagement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProtocolManagement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignerExtension",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signerExtension",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getLatestMPCInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMPCInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManagementOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMPCNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValidPMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidPMMAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidPubkey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfPMMAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerExtension",
    data: BytesLike
  ): Result;
}

export interface ProtocolFetcherProxy extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolFetcherProxy;
  waitForDeployment(): Promise<this>;

  interface: ProtocolFetcherProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLatestMPCInfo: TypedContractMethod<
    [networkId: BytesLike],
    [ITypes.MPCInfoStructOutput],
    "view"
  >;

  getMPCInfo: TypedContractMethod<
    [networkId: BytesLike, pubkey: BytesLike],
    [ITypes.MPCInfoStructOutput],
    "view"
  >;

  getManagementOwner: TypedContractMethod<[], [string], "view">;

  getPFeeRate: TypedContractMethod<
    [pairInfo: [BytesLike, BytesLike, BytesLike, BytesLike]],
    [bigint],
    "view"
  >;

  getPMMAccounts: TypedContractMethod<
    [pmmId: BytesLike, fromIdx: BigNumberish, toIdx: BigNumberish],
    [string[]],
    "view"
  >;

  getProtocolState: TypedContractMethod<[], [bigint], "view">;

  getTokens: TypedContractMethod<
    [fromIdx: BigNumberish, toIdx: BigNumberish],
    [ITypes.TokenInfoStructOutput[]],
    "view"
  >;

  getVault: TypedContractMethod<
    [networkId: BytesLike, tokenId: BytesLike],
    [string],
    "view"
  >;

  isMPCNode: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isSolver: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isValidNetwork: TypedContractMethod<
    [networkId: BytesLike],
    [boolean],
    "view"
  >;

  isValidPMM: TypedContractMethod<[pmmId: BytesLike], [boolean], "view">;

  isValidPMMAccount: TypedContractMethod<
    [pmmId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isValidPubkey: TypedContractMethod<
    [networkId: BytesLike, pubkey: BytesLike],
    [boolean],
    "view"
  >;

  isValidToken: TypedContractMethod<
    [networkId: BytesLike, tokenId: BytesLike],
    [boolean],
    "view"
  >;

  numOfPMMAccounts: TypedContractMethod<[pmmId: BytesLike], [bigint], "view">;

  numOfSupportedTokens: TypedContractMethod<[], [bigint], "view">;

  pManagement: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  setProtocolManagement: TypedContractMethod<
    [newManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  setSignerExtension: TypedContractMethod<
    [newSignerExtension: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultRegistry: TypedContractMethod<
    [newRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  signerExtension: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLatestMPCInfo"
  ): TypedContractMethod<
    [networkId: BytesLike],
    [ITypes.MPCInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMPCInfo"
  ): TypedContractMethod<
    [networkId: BytesLike, pubkey: BytesLike],
    [ITypes.MPCInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManagementOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPFeeRate"
  ): TypedContractMethod<
    [pairInfo: [BytesLike, BytesLike, BytesLike, BytesLike]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPMMAccounts"
  ): TypedContractMethod<
    [pmmId: BytesLike, fromIdx: BigNumberish, toIdx: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokens"
  ): TypedContractMethod<
    [fromIdx: BigNumberish, toIdx: BigNumberish],
    [ITypes.TokenInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<
    [networkId: BytesLike, tokenId: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMPCNode"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSolver"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidNetwork"
  ): TypedContractMethod<[networkId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidPMM"
  ): TypedContractMethod<[pmmId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidPMMAccount"
  ): TypedContractMethod<
    [pmmId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidPubkey"
  ): TypedContractMethod<
    [networkId: BytesLike, pubkey: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidToken"
  ): TypedContractMethod<
    [networkId: BytesLike, tokenId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "numOfPMMAccounts"
  ): TypedContractMethod<[pmmId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numOfSupportedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pManagement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setProtocolManagement"
  ): TypedContractMethod<[newManagement: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSignerExtension"
  ): TypedContractMethod<
    [newSignerExtension: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultRegistry"
  ): TypedContractMethod<[newRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signerExtension"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
