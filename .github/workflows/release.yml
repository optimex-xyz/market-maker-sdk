name: Build and Publish Production Package

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. 0.1.0)'
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Get package info
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Use manually specified version
        id: version
        run: |
          MANUAL_VERSION="${{ github.event.inputs.version }}"
          echo "Using manually specified version: $MANUAL_VERSION"
          echo "new_version=${MANUAL_VERSION}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: yarn install

      - name: Build package
        run: yarn build

      - name: Configure Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      - name: Update version in package.json
        run: |
          echo "Current version in package.json: $(node -p "require('./package.json').version")"
          echo "Setting new version: ${{ steps.version.outputs.new_version }}"
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Commit updated package.json
        run: |
          # Disable husky temporarily for this commit
          git config --local core.hooksPath /dev/null

          git add package.json
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
          git push "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" HEAD:main
          echo "Changes committed and pushed"

      - name: Create version tag
        run: |
          git tag -a v${{ steps.version.outputs.new_version }} -m "Release v${{ steps.version.outputs.new_version }}"
          git push "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" --tags

      - name: Generate changelog
        run: |
          LAST_TAG=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 --exclude="v${{ steps.version.outputs.new_version }}" 2>/dev/null || echo "")

          echo "## What's Changed" > CHANGELOG.md

          if [ -z "$LAST_TAG" ]; then
            # If no previous tags, use all commits
            LOG_RANGE=""
          else
            # Get commits since last tag
            LOG_RANGE="${LAST_TAG}..HEAD"
          fi

          git log $LOG_RANGE --pretty=format:"%s (%h)" --no-merges | grep -v "chore(release): bump version" > /tmp/filtered_commits.txt

          # Features
          echo -e "\n### Features" >> CHANGELOG.md
          cat /tmp/filtered_commits.txt | grep -E "^feat(\([^)]+\))?:" | sed 's/^/* /' >> CHANGELOG.md || echo "* No new features" >> CHANGELOG.md

          # Fixes
          echo -e "\n### Bug Fixes" >> CHANGELOG.md
          cat /tmp/filtered_commits.txt | grep -E "^fix(\([^)]+\))?:" | sed 's/^/* /' >> CHANGELOG.md || echo "* No bug fixes" >> CHANGELOG.md

          echo -e "\n### Maintenance" >> CHANGELOG.md
          cat /tmp/filtered_commits.txt | grep -E "^(chore|ci|build|refactor)(\([^)]+\))?:" | sed 's/^/* /' >> CHANGELOG.md || echo "* No maintenance changes" >> CHANGELOG.md

          # Other changes
          echo -e "\n### Other Changes" >> CHANGELOG.md
          cat /tmp/filtered_commits.txt | grep -v -E "^(feat|fix|chore|ci|build|refactor)(\([^)]+\))?:" | sed 's/^/* /' >> CHANGELOG.md || echo "* No other changes" >> CHANGELOG.md

          sed -i '/\* No .* changes$/ { N; /^\n$/ d; }' CHANGELOG.md

          cat CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.BF_DEVOPS_CHANNEL_ID }}
          token: ${{ secrets.BF_MONITOR_BOT }}
          message: |
            ðŸš€ NPM Package Published

            ðŸ“Œ Package: ${{ steps.package.outputs.name }}
            ðŸ“Œ Version: ${{ steps.version.outputs.new_version }}
            ðŸ“Œ Environment: production

            ðŸ‘¤ Triggered by: ${{ github.actor }}

            ðŸ”— Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
